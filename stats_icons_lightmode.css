/*============================================================
STATS ICONS - light mode version
============================================================*/
/* inspired by the "Tide" skin by ElectricAlice */

/*
stats can be found here on AO3:
- works (blurb and meta)
- bookmarks - watch out for bookmarked series and external bookmarks!
- series (list and series meta)
- collections list
- tagsets (list and tagset page)
- own statistics page
*/

/*========== stats link text ==========*/

.stats a,
.stats a:visited:hover {
  border: none; /* removes underline from links */
  color: #900; /* link color */
}

.stats a:hover,
.stats a:visited {
  color: #666; /* color of link hover and visited links */
}

.stats a:visited:hover {
  color: #111; /* hover color for visited links */
}

/*========== stats placement + spacing ==========*/

/* reset margin and padding */
dl.stats dd,
dl.stats dt,
.meta .stats dl dd {
  margin: 0;
  padding: 0;
}

dl.stats {
  display: flex;
  flex-wrap: wrap;
  justify-content: right;
  column-gap: 1em; /* gap between individual stats */
}

/* stats in meta boxes should be left-aligned */
.meta dl.stats {
  justify-content: left;
}

/* indent for stats icons in meta box on statistics page */
dl.meta.statistics dd {
  padding-left: 5px;
}

/* position of icon in relation to corresponding value */
dl.stats dd,
dl.statistics dt {
  display: flex;
  column-gap: 5px;
  align-items: center;
}

/*========== setup for the stats icons ==========*/

/* hide the text before the stats */
.stats:not(.skins .stats) dt {
  display: none;
}

/* styling the icons */
.stats:not(.skins .stats) dd::before,
dl.statistics dt::before {
  display: inline-block;
  content: "";
  width: 1em;
  height: 1em;
  transform: translate(0, -1px);
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center;
  filter: invert(79%) sepia(0%) saturate(14%) hue-rotate(185deg) brightness(87%) contrast(87%); /* changes the color of the icons from black to gray */
}

/*========== stats icons (images) ==========*/

/* language */
.stats dd.language::before {
  background-image: url("https://i.ibb.co/KzD2KWZv/zerafina-stats-icon-language-01.png");
}

/* words */
.stats dd.words::before,
dl.statistics dt.words::before {
  background-image: url("https://i.ibb.co/7x2N2zV8/zerafina-stats-icon-words-01.png");
}

/* works */
.stats dd.works::before,
.stats dd:has(a[href$=works])::before /* works in collection */ {
  background-image: url("https://i.ibb.co/twZf0RM9/zerafina-stats-icon-works-01.png");
}

/* chapters */
.stats dd.chapters::before {
  background-image: url("https://i.ibb.co/JRpLfkgf/zerafina-stats-icon-chapters-01.png");
}

/* comments */
.stats dd.comments::before {
  background-image: url("https://i.ibb.co/3YTgryH2/zerafina-stats-icon-comments-01.png");
}

/* kudos */
.stats dd.kudos::before,
dl.statistics dt.kudos::before {
  background-image: url("https://i.ibb.co/5gPnsXN4/zerafina-stats-icon-kudos-01.png");
}

/* bookmarks */
.stats dd.bookmarks::before,
dl.statistics dt.bookmarks::before {
  background-image: url("https://i.ibb.co/DDgZz4Gw/zerafina-stats-icon-bookmarks-02.png");
}

/* related works (external bookmarks) */
.stats dd.inspired::before {
  background-image: url("https://i.ibb.co/rGDJWrbZ/zerafina-stats-icon-related-works-01.png");
}

/* hits */
.stats dd.hits::before,
dl.statistics dt.hits::before {
  background-image: url("https://i.ibb.co/Zz7mY8yL/zerafina-stats-icon-hits-01.png");
}

/* collections */
.stats dd.collections::before,
.stats dd:has(a[href$=collections])::before /* subcollections*/ {
  background-image: url("https://i.ibb.co/ks5VXnDZ/zerafina-stats-icon-collection-01.png");
}

/* date published */
.stats dd.published::before {
  background-image: url("https://i.ibb.co/DDmDb5sP/zerafina-stats-icon-published-01.png");
}

/* date updated/completed */
/* I have not found a way to display a different icon for each case */
.stats dd.status::before {
  background-image: url("https://i.ibb.co/Y7zRgwS3/zerafina-stats-icon-updated-01.png");
}

/* completion status (series) */
.series.meta.group .stats dd:nth-of-type(3)::before {
  background-image: url("https://i.ibb.co/S7vdPxLc/zerafina-stats-icon-complete-01.png");
}

/* subscriptions (statistics page) */
.stats dd.subscriptions::before,
dl.statistics dt.subscriptions::before {
  background-image: url("https://i.ibb.co/VY57wxPD/zerafina-stats-icon-subscriptions-01.png");
}

/* comment threads (statistics page) */
.statistics .stats dd.comments::before,
dl.statistics dt.comment::before {
  background-image: url("https://i.ibb.co/078f2nh/zerafina-stats-icon-comment-threads-01.png");
}

/* fandoms */
.stats dd:has(a[href$=fandoms])::before,
.tagset .stats dd:nth-of-type(1)::before {
  background-image: url("https://i.ibb.co/tPpqR5g3/zerafina-stats-icon-fandoms-01.png");
}

/* collections: bookmarked items */
.collection.blurb .stats dd:has(a[href$=bookmarks])::before {
  background-image: url("https://i.ibb.co/h5cy7x0/zerafina-stats-icon-bookmarked-items-01.png");
}

/* collections: promts/requests */
.stats dd:has(a[href$=requests])::before {
  background-image: url("https://i.ibb.co/tSm91Kw/zerafina-stats-icon-promts-01.png");
}

/* tagsets: characters */
.tagset .stats dd:nth-of-type(2)::before {
  background-image: url("https://i.ibb.co/G4FxyzRY/zerafina-stats-icon-characters-01.png");
}

/* tagests: relationships */
.tagset .stats dd:nth-of-type(3)::before {
  background-image: url("https://i.ibb.co/sJdDTdTq/zerafina-stats-icon-relationships-01.png");
}

/* tagsets: additional tags*/
.tagset .stats dd:nth-of-type(4)::before {
  background-image: url("https://i.ibb.co/HLPwzwMh/zerafina-stats-icon-tags-additional-01.png");
}

/* tagsets: freeform tags *//* example: https://archiveofourown.org/tag_sets/19213 */
.tagset .meta .stats dd:nth-of-type(4)::before {
  background-image: url("https://i.ibb.co/ynKkVZyk/zerafina-stats-icon-tags-freeform-01.png");
}

/*============================================================
STATS HOVER TEXT
============================================================*/
/* just delete the following part of the code if you don't want the hover text */

/*======= general formatting/styling =======*/

/* text container (tooltip) */
.stats dd::after {
  display: none;
  position: absolute;
  top: 2em;
  padding: 0.3em;
  border: 1px solid #67676C;
  border-radius: 0.25rem;
  background: #F9F9FB;
  color: #2a2a2a;
  font-size: 0.85em;
  line-height: 1;
  text-align: center;
  z-index: 99999;
}

/* makes text appear on hover */
.stats dd:hover::after {
  display: inline-block;
}

/* this is to prevent the hover text from breaking or getting cut off in some places */
/* haven't found a better solution yet :/ */
.statistics .stats dd:last-of-type::after,
.index .stats dd:last-of-type:has(a[href$=bookmarks])::after,
.stats dd.inspired::after,
.tagset .index .stats dd:last-of-type::after {
  right: 0;
}

/*========== hover text for individual stats ==========*/

/* language */
.stats dd.language::after {
  content: "Language";
}

/* words */
.stats dd.words::after {
  content: "Words";
}

/* works */
.stats dd.works::after,
.stats dd:has(a[href$=works])::after /* works in collection */ {
  content: "Works";
}

/* chapters */
.stats dd.chapters::after {
  content: "Chapters";
}

/* comments */
.stats dd.comments::after {
  content: "Comments";
}

/* kudos */
.stats dd.kudos::after {
  content: "Kudos";
}

/* bookmarks */
.stats dd.bookmarks::after {
  content: "Bookmarks";
}

/* related works (external bookmarks) */
.stats dd.inspired::after {
  content: "Related Works";
}

/* hits */
.stats dd.hits::after {
  content: "Hits";
}

/* collections */
.stats dd.collections::after {
  content: "Collections";
}

/* date published */
.stats dd.published::after {
  content: "Published";
}

/* date updated/completed */
.stats dd.status::after {
  content: "Updated";
}

/* completion status (series) */
.series.meta.group .stats dd:nth-of-type(3)::after {
  content: "Complete";
}

/* subscriptions (statistics page) */
.stats dd.subscriptions::after {
  content: "Subscriptions";
}

/* comment threads (statistics page) */
.statistics .stats dd.comments::after {
  content: "Comment Threads";
}

/* fandoms */
.stats dd:has(a[href$=fandoms])::after,
.tagset .stats dd:nth-of-type(1)::after {
  content: "Fandoms";
}

/* tagsets: characters */
.tagset .stats dd:nth-of-type(2)::after {
  content: "Characters";
}

/* tagests: relationships */
.tagset .stats dd:nth-of-type(3)::after {
  content: "Relationships";
}

/* tagsets: additional tags*/
.tagset .stats dd:nth-of-type(4)::after {
  content: "Additional Tags";
}

/* tagsets: freeform tags */
.tagset .meta .stats dd:nth-of-type(4)::after {
  content: "Freeforms";
}

/* collections: promts/requests */
.stats dd:has(a[href$=requests])::after {
  content: "Prompts";
}

/* collections: challenges/subcollections */
.collections-index .stats dd:has(a[href$=collections])::after {
  content: "Challenges/Subcollections";
}

/* collections: bookmarked items */
.collection.blurb .stats dd:has(a[href$=bookmarks])::after {
  content: "Bookmarked Items";
}